<?xml version="1.0" encoding="utf-8"?>
<package>
	<job>
	<resource id="config"><![CDATA[
{
	src : "%(basedir)src\\",
	build : "%(basedir)build\\",
	
	files : [
		{ text: "!function(global){", type: "snip" },
			{ name:"Lang/Base.js", type: "file", required:true },
			{ name:"Lang/Function.js", type: "file", required:true },
			{ name:"Lang/Class.js", type: "file", required:true },
			{ name:"Lang/Abstract.js", type: "file", required:true },
			{ name:"Lang/Number.js", type: "file", required:true },
			{ name:"Lang/Array.js", type: "file", required:true },
			{ name:"Lang/String.js", type: "file", required:true },
			{ name:"Util/Json.js", type: "file", required:true },
			
			{ text: "function Exports() { for(var i=0; i<arguments.length; i++) global[arguments[i]]=eval('('+arguments[i]+')'); }", type: "snip" },
			{ text: "Exports('Class','Abstract','Type','Hash','Exports','JSON');", type: "snip" },
			
		{ text: "}(this||window);", type: "snip" },
		
		
		{ name:"Util/Options.js", type: "file", required:true },
		{ name:"Util/Chain.js", type: "file", required:true },
		{ name:"Util/Events.js", type: "file", required:true },
		{ name:"Util/Encoder.js", type: "file", required:true },
		{ name:"Util/Formats.js", type: "file", required:true },
		{ name:"Util/Template.js", type: "file", required:true },
		{ name:"Util/Validator.js", type: "file", required:true },
		
		{ name:"GreasePencil.js", type: "file", required:true },
		
		{ name:"Data/Sequel.js", type: "file", required:true },
		{ name:"Data/FoxPro.js", type: "file", required:true },
		
		{ name:"App/Access.js", type: "file", required:true },
		{ name:"App/Excel.js", type: "file", required:true },
		{ name:"App/Progress.js", type: "file", required:false },
		{ name:"App/iSeries.js", type: "file", required:false },
		
		{ name:"Resources.js", type: "file", required:true },
		{ name:"Reporting.js", type: "file", required:true }
	]
}
	]]></resource>
	
	<object id="Fso" progid="Scripting.FileSystemObject" />
	<object id="Shell" progid="WScript.Shell" />
	<object id="Encoder" progid="Scripting.Encoder" />
	
	<script language="JScript"><![CDATA[
String.prototype.parse = function() { return this.replace(/%\(([A-Za-z0-9_]*)\)/g, function(w,g){return (typeof CONFIG[g] != 'undefined' && CONFIG[g] != null) ? CONFIG[g] : w; }); };

var CONFIG = eval('('+getResource('config')+')');
CONFIG.basedir = WScript.ScriptFullName.replace(WScript.ScriptName, "");
	
	
var BUILD = CONFIG.build.parse(),
	SRC = CONFIG.src.parse();


// check build dir exists
if(!Fso.FolderExists(BUILD)) Fso.CreateFolder(BUILD);


function merge() {
	var out = Fso.CreateTextFile(BUILD+"_GreasePencil.js");

	for(var i = 0; i < CONFIG.files.length; i++) {
		switch(CONFIG.files[i].type || 'file') {
			case 'snip':
				out.WriteLine(CONFIG.files[i].text);
				break;
			case 'file':
				var file = Fso.OpenTextFile(SRC+CONFIG.files[i].name.parse(), 1, false);
				data = file.ReadAll();
				file.Close();
				out.WriteLine(data);
				break;
		}
	}

	out.close();
}

function compress() {
	if(!Fso.FileExists(BUILD+"_GreasePencil.js")) merge();
	
	var cmd = "cscript //nologo //Job:compress "+CONFIG.basedir+'tools\\Packer.wsf "/input:'+BUILD+'_GreasePencil.js" "/output:'+BUILD+'GreasePencil.min.js"';
	Shell.Run(cmd, 7, true);
}

function encode() {
	if(!Fso.FileExists(BUILD+"GreasePencil.min.js")) merge();
	
	var out = Fso.CreateTextFile(BUILD+"GreasePencil.enc.js");
	var file = Fso.OpenTextFile(BUILD+"GreasePencil.min.js");
	data = file.ReadAll();
	file.Close();
	out.Write( "//**Start Encode**"+Encoder.EncodeScriptFile(".js", data, 0, "") );
	out.Close();
}

(function main() {
	
	merge();
	compress();
	encode();
	
})();

	]]></script>
	</job>
</package>